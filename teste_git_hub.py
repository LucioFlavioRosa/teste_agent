# -*- coding: utf-8 -*-
"""
teste_git_hub.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11ZTKLHaPzrTy8tcu3IYFSCefnnVtvIEF
"""

from agents import agente_revisor
from flask import Flask, request, jsonify
import traceback

nome_do_repositorio = "LucioFlavioRosa/agent-vinna"

# Usando a função já desacoplada do agente
resposta_desing = agente_revisor.executar_analise(tipo_analise='pentest', repositorio=nome_do_repositorio)
print(resposta_desing['resultado'])

# --- API Flask ---
app = Flask(__name__)


def parse_analise_request(dados):
    """
    Extrai e valida os parâmetros da requisição.
    """
    tipo_analise = dados.get('tipo_analise')
    repositorio = dados.get('repositorio')
    codigo = dados.get('codigo')
    instrucoes_extras = dados.get('instrucoes_extras', '')
    if not tipo_analise:
        return None, {"erro": "O parâmetro 'tipo_analise' é obrigatório."}, 400
    if not repositorio and not codigo:
        return None, {"erro": "É obrigatório fornecer pelo menos um dos parâmetros: 'repositorio' ou 'codigo'."}, 400
    return {
        'tipo_analise': tipo_analise,
        'repositorio': repositorio,
        'codigo': codigo,
        'instrucoes_extras': instrucoes_extras
    }, None, None


@app.route('/executar_analise', methods=['POST'])
def rodar_analise():
    print("INFO: Requisição recebida no endpoint /executar_analise")
    dados = request.get_json()
    if not dados:
        return jsonify({"erro": "Corpo da requisição inválido ou não é um JSON."}), 400
    params, error_resp, error_code = parse_analise_request(dados)
    if error_resp:
        return jsonify(error_resp), error_code
    try:
        print(f"INFO: Iniciando análise do tipo '{params['tipo_analise']}'...")
        resultado = agente_revisor.executar_analise(
            tipo_analise=params['tipo_analise'],
            repositorio=params['repositorio'],
            codigo=params['codigo'],
            instrucoes_extras=params['instrucoes_extras']
        )
        print("INFO: Análise concluída com sucesso.")
        return jsonify(resultado), 200
    except Exception as e:
        print(f"ERRO: A execução do agente falhou. Causa: {e}")
        traceback.print_exc()
        return jsonify({"erro": f"Ocorreu um erro interno no servidor: {e}"}), 500


@app.route("/")
def index():
    return "<h1>Servidor de Agentes de IA está no ar!</h1><p>Use o endpoint <b>/executar_analise</b> via POST para rodar uma análise.</p>"


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
