# -*- coding: utf-8 -*-
"""teste_git_hub.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11ZTKLHaPzrTy8tcu3IYFSCefnnVtvIEF
"""

#!pip install PyGithub

from agents import agente_revisor

nome_do_repositorio = "LucioFlavioRosa/agent-vinna"

resposta_desing = agente_revisor.executar_analise(tipo_analise='pentest', repositorio=nome_do_repositorio)
#resposta_desing = agente_revisor_design.main(repositorio=nome_do_repositorio)
#resposta_seguranca = agente_revisor_seguranca.main(repositorio=nome_do_repositorio)
#resposta_pen_test = agente_pen_test.main(repositorio=nome_do_repositorio)

print(resposta_desing['resultado'])

# app.py
from flask import Flask, request, jsonify
from agents import agente_revisor
import traceback
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
import os
from functools import wraps


app = Flask(__name__)

# Configuração de rate limiting
limiter = Limiter(
    get_remote_address,
    app=app,
    default_limits=["5 per minute", "100 per day"],
    storage_uri="memory://"
)

# Lista de repositórios permitidos (allow-list)
ALLOWED_REPOS = [
    "LucioFlavioRosa/agent-vinna",
    "empresa/repo-seguro"
]

# Função para autenticação básica
def require_api_key(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        api_key = request.headers.get('X-API-Key')
        if not api_key or api_key != os.environ.get('API_SECRET_KEY'):
            return jsonify({"erro": "Acesso não autorizado"}), 401
        return f(*args, **kwargs)
    return decorated


@app.route('/executar_analise', methods=['POST'])
@require_api_key
@limiter.limit("3 per minute")
def rodar_analise():

    print("INFO: Requisição recebida no endpoint /executar_analise")

    dados = request.get_json()

    if not dados:
        return jsonify({"erro": "Corpo da requisição inválido ou não é um JSON."}), 400

    tipo_analise = dados.get('tipo_analise')
    repositorio = dados.get('repositorio')
    codigo = dados.get('codigo')
    instrucoes_extras = dados.get('instrucoes_extras', '')

    if not tipo_analise:
        return jsonify({"erro": "O parâmetro 'tipo_analise' é obrigatório."}), 400
    if not repositorio and not codigo:
        return jsonify({"erro": "É obrigatório fornecer pelo menos um dos parâmetros: 'repositorio' ou 'codigo'."}), 400

    # Validação de repositório permitido
    if repositorio and repositorio not in ALLOWED_REPOS:
        return jsonify({"erro": "Repositório não autorizado"}), 403

    try:
        print(f"INFO: Iniciando análise do tipo '{tipo_analise}'...")

        resultado = agente_revisor.executar_analise(
            tipo_analise=tipo_analise,
            repositorio=repositorio,
            codigo=codigo,
            instrucoes_extras=instrucoes_extras
        )

        print("INFO: Análise concluída com sucesso.")
        return jsonify(resultado), 200

    except Exception as e:
        print(f"ERRO: A execução do agente falhou. Causa: {str(e)}")
        # Não expor detalhes da exceção ao cliente
        return jsonify({"erro": "Ocorreu um erro interno no servidor"}), 500

@app.route("/")
def index():
    return "<h1>Servidor de Agentes de IA está no ar!</h1><p>Use o endpoint <b>/executar_analise</b> via POST para rodar uma análise.</p>"


if __name__ == '__main__':
    # Desabilitar modo debug em produção
    debug_mode = os.environ.get('FLASK_ENV') == 'development'
    app.run(host='0.0.0.0', port=5000, debug=debug_mode)
