# -*- coding: utf-8 -*-
"""teste_git_hub.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11ZTKLHaPzrTy8tcu3IYFSCefnnVtvIEF
"""

from flask import Flask, request, jsonify
import logging
from agents import agente_revisor
from agents.agente_revisor import AnalysisContext
import traceback

logger = logging.getLogger(__name__)

app = Flask(__name__)


def analisar_requisicao(dados):
    tipo_analise = dados.get('tipo_analise')
    repositorio = dados.get('repositorio')
    codigo = dados.get('codigo')
    instrucoes_extras = dados.get('instrucoes_extras', '')
    if not tipo_analise:
        return {"erro": "O parâmetro 'tipo_analise' é obrigatório."}, 400
    if not repositorio and not codigo:
        return {"erro": "É obrigatório fornecer pelo menos um dos parâmetros: 'repositorio' ou 'codigo'."}, 400
    ctx = AnalysisContext(tipo_analise=tipo_analise,
                         repositorio=repositorio,
                         codigo=codigo,
                         instrucoes_extras=instrucoes_extras)
    try:
        logger.info(f"INFO: Iniciando análise do tipo '{tipo_analise}'...")
        resultado = agente_revisor.executar_analise(ctx)
        logger.info("INFO: Análise concluída com sucesso.")
        return resultado, 200
    except Exception as e:
        logger.error(f"ERRO: A execução do agente falhou. Causa: {e}")
        traceback.print_exc()
        return {"erro": f"Ocorreu um erro interno no servidor."}, 500


@app.route('/executar_analise', methods=['POST'])
def rodar_analise():
    logger.info("INFO: Requisição recebida no endpoint /executar_analise")
    dados = request.get_json()
    if not dados:
        return jsonify({"erro": "Corpo da requisição inválido ou não é um JSON."}), 400
    resposta, status = analisar_requisicao(dados)
    return jsonify(resposta), status


@app.route("/")
def index():
    return "<h1>Servidor de Agentes de IA está no ar!</h1><p>Use o endpoint <b>/executar_analise</b> via POST para rodar uma análise.</p>"


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    app.run(host='0.0.0.0', port=5000, debug=True)
