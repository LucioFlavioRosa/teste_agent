# -*- coding: utf-8 -*-
"""teste_git_hub.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11ZTKLHaPzrTy8tcu3IYFSCefnnVtvIEF
"""

#!pip install PyGithub

from agents import agente_revisor
import unittest
from unittest.mock import patch, MagicMock

nome_do_repositorio = "LucioFlavioRosa/agent-vinna"

# Garantir que instrucoes_extras seja passado explicitamente
resposta_desing = agente_revisor.executar_analise(tipo_analise='pentest', repositorio=nome_do_repositorio, instrucoes_extras="")
#resposta_desing = agente_revisor_design.main(repositorio=nome_do_repositorio)
#resposta_seguranca = agente_revisor_seguranca.main(repositorio=nome_do_repositorio)
#resposta_pen_test = agente_pen_test.main(repositorio=nome_do_repositorio)

print(resposta_desing['resultado'])

# app.py
from flask import Flask, request, jsonify
from agents import agente_revisor
import traceback

app = Flask(__name__)

@app.route('/executar_analise', methods=['POST'])
def rodar_analise():
    print("INFO: Requisição recebida no endpoint /executar_analise")
    dados = request.get_json()
    if not dados:
        return jsonify({"erro": "Corpo da requisição inválido ou não é um JSON."}), 400
    tipo_analise = dados.get('tipo_analise')
    repositorio = dados.get('repositorio')
    codigo = dados.get('codigo')
    instrucoes_extras = dados.get('instrucoes_extras', '')
    if not tipo_analise:
        return jsonify({"erro": "O parâmetro 'tipo_analise' é obrigatório."}), 400
    if not repositorio and not codigo:
        return jsonify({"erro": "É obrigatório fornecer pelo menos um dos parâmetros: 'repositorio' ou 'codigo'."}), 400
    try:
        print(f"INFO: Iniciando análise do tipo '{tipo_analise}'...")
        resultado = agente_revisor.executar_analise(
            tipo_analise=tipo_analise,
            repositorio=repositorio,
            codigo_entrada=codigo,
            instrucoes_extras=instrucoes_extras
        )
        print("INFO: Análise concluída com sucesso.")
        return jsonify(resultado), 200
    except Exception as e:
        print(f"ERRO: A execução do agente falhou. Causa: {e}")
        traceback.print_exc()
        return jsonify({"erro": f"Ocorreu um erro interno no servidor: {e}"}), 500

@app.route("/")
def index():
    return "<h1>Servidor de Agentes de IA está no ar!</h1><p>Use o endpoint <b>/executar_analise</b> via POST para rodar uma análise.</p>"

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)

# Testes automatizados com mocks
class TestAgenteRevisor(unittest.TestCase):
    @patch('agents.agente_revisor.executar_analise')
    def test_executar_analise_mock(self, mock_executar_analise):
        mock_executar_analise.return_value = {"tipo_analise": "pentest", "resultado": "mocked_result"}
        resultado = agente_revisor.executar_analise(tipo_analise="pentest", repositorio=nome_do_repositorio, instrucoes_extras="Teste extra")
        self.assertEqual(resultado["resultado"], "mocked_result")

    @patch('tools.revisor_geral.executar_analise_llm')
    def test_llm_mock(self, mock_llm):
        mock_llm.return_value = "mocked_llm_result"
        resultado = agente_revisor.executar_analise(tipo_analise="pentest", repositorio=nome_do_repositorio, instrucoes_extras="Teste extra")
        self.assertIn("mocked_llm_result", resultado["resultado"])

    @patch('tools.github_reader.obter_arquivos_para_analise')
    def test_github_reader_mock(self, mock_github):
        mock_github.return_value = {"file.py": "print('hello')"}
        resultado = agente_revisor.executar_analise(tipo_analise="pentest", repositorio=nome_do_repositorio, instrucoes_extras="Teste extra")
        self.assertTrue(isinstance(resultado, dict))

if __name__ == "__main__":
    unittest.main(argv=['first-arg-is-ignored'], exit=False)
